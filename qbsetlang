#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Sun Feb 13, 2022
# Config Class
# Sat Feb 12, 2022
# Save the chosen languages in `config.yaml`
# get the languages list automatically + check for languages' list update
# Mon Jan 31, 2022
# time-limit field should contain a number which is multiple of 50
# San Jan 22, 2022
# In compliance with the latest version of Selenium since find_element_by_id is deprecated now.
# Sat 6 Nov 2021
# output the problem title as well as the url
# Sun 17 Oct 2021
# bug fix with site update.
# Fri 18 Dec 2020
#
# Setting default languages for programming problems of quera.ir used as assignments.

import sys
from selenium.webdriver import Firefox
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.common import exceptions
from rich import print
from rich.padding import Padding
from parser import parse_args
from pathlib import Path
from tkinter import *
import yaml

class Config(object):
    config_file = 'config.yaml'
    @staticmethod
    def exist():
        return Path(Config.config_file).is_file()

    @staticmethod
    def set(key, value):
        data = Config.get() if Config.exist() else {key: value}
        with open(Config.config_file, "w") as stream:
            try:
                data[key] = value
                yaml.dump(data, stream)
            except yaml.YAMLError as exc:
                print(exc)

    @staticmethod
    def get(key=None):
        with open(Config.config_file, "r") as stream:
            try:
                data = yaml.safe_load(stream)
                return data[key] if key else data
            except yaml.YAMLError as exc:
                print(exc)
    
    def __class_getitem__(cls, key=None): #from python 3.7
        return Config.get(key)

class LangWindow(Frame):
    def __init__(self, items, config):
        self.items = list(items)
        self.config = config
        self.window = Tk()
        self.window.title('Choose the desired languages')
        def destroy(): pass 
        self.window.protocol("WM_DELETE_WINDOW", destroy)

    def get(self):
        if not self.config and Config.exist():
            return Config['Judge']
        def _state(): return map((lambda var: var.get()), vars)
        def allstates(): 
            if any(list(_state())):
                if self.config or not Config.exist():
                    Config.set('Judge', [ self.items[i] for i,j in enumerate(list(_state())) if j ])
                self.window.quit()
                self.window.destroy()
        vars = []
        row, width = -1, max([len(_) for _ in self.items])
        for i, item in enumerate(self.items):
            if i%3==0: row += 1 
            var = BooleanVar()
            chk = Checkbutton(self.window, text=item, variable=var, relief=RIDGE, 
                                width=width, anchor=W).grid(row=row,column=i%3)
            vars.append(var)
        Button(self.window, text='Set', command=allstates).grid(column=1)
        self.window.mainloop()
        return [ self.items[i] for i,j in enumerate(list(_state())) if j ]

class Assignment():
    def __init__(self, args):
        self.args = args
        if not self.args.assignment_num.isdigit(): sys.exit()
        self.asg_url = f'https://quera.ir/course/assignments/{self.args.assignment_num}/problems'
        self.langs = []
        self.Jlang2id = dict()
        self._setClang = False

    def connect(self):
        self.driver = Firefox()
        self.driver.get(self.asg_url)
        elem = self.driver.find_element(By.NAME, 'login')
        elem.send_keys(self.args.username)
        elem = self.driver.find_element(By.NAME, 'password')
        elem.send_keys(self.args.password)
        self.driver.find_element(By.CSS_SELECTOR,
                            'button.ui.fluid.large.primary.submit.button').click(
                            )  #send_keys(Keys.RETURN)
    def _getClang(self):
        if self._setClang: return 
        self._setClang = True
        self.langs = LangWindow(self.Jlang2id.keys(), self.args.config).get()

    def setlang(self):
        self.connect()
        self.driver.get(self.asg_url)
        elements = self.driver.find_elements(By.CLASS_NAME, 'problem_menu_item')
        probUrls = [(item.get_attribute("href").replace('problems',
                                                        'edit_problem'),
                    item.text.translate(str.maketrans('', '', '۰۱۲۳۴۵۶۷۸۹\n')))
                    for item in elements]
        radio_check = lambda x: self.driver.find_element(By.CSS_SELECTOR,
                           f"input[type='radio'][value='{x}']").is_selected()
        for url, item in probUrls:
            self.driver.get(url)
            elem = self.driver.find_element(By.ID, 'set-all-selected')
            elem.click() # select all and then
            elem.click() # deselect all
            if not self.Jlang2id:
                ids = [_.get_attribute("id") for _ in self.driver.find_elements(
                    By.CSS_SELECTOR,"table[class='ui unstackable collapsing center aligned table'] tbody div[class='ui checkbox select-filetype qu-checkbox'] input")]
                names = [_.get_attribute('data-name') for _ in self.driver.find_elements(
                    By.CSS_SELECTOR,"table[class='ui unstackable collapsing center aligned table'] tbody td[class='filetype-name']")]
                self.Jlang2id = dict(zip(names, ids))
            if radio_check('J'): # Judge
                self._getClang()
                for lang in self.langs:
                    try: # sometimes there will be an update in the list, e.g. Python 3.7 to Pyhton 3.8
                        self.driver.find_element(By.ID, f"{self.Jlang2id[lang]}").send_keys(Keys.SPACE)
                    except:
                        print(Padding(f"{' Failure '.center(60,'#')}\n"+\
                        f"## The [black]{lang}[/black] is not in the quera list anymore,\n"+\
                        f"## run the script with '[black]--config[/black]' switch.\n"+\
                        f"{'#'*60}", (1,2), style='on red', expand=False))
            elif radio_check('C'): # Compile
                pass
            elif radio_check('U'): # Upload
                pass
            # The following doesnot work yet. So, the code use `save_and_continute` and `cancel` buttons instead.
            #ok = driver.find_element_by_css_selector("button.ui.green.button")
            for elem in self.driver.find_elements(By.CSS_SELECTOR,"input[type='number'][class='time-limit']"): 
                time_limit = int(elem.get_attribute('value'))
                if time_limit%100 not in (50,0):
                    elem.clear()
                    elem.send_keys(str(int(round(time_limit//100,1)*100)))
            self.driver.find_element(By.NAME, 'save_and_continue_editing').click()
            self.driver.find_element(By.CSS_SELECTOR, "a.ui.teal.button").click()
            print(f"\r[{item}]({url.replace('edit_problem', 'problems')})")

    def dc(self):
        self.driver.close()            

def main():
    """
    Main entry point for execution.
    """
    args = parse_args()
    asg = Assignment(args)

    try:
        asg.setlang()
    except exceptions.WebDriverException as exp:
        print(exp.msg)
        sys.exit(1)
    finally:
        asg.dc()

    print(" DONE! ".center(80, '='))

if __name__ == '__main__':
    main()